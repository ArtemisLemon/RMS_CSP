/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chocomodel;
import java.util.Map;
import java.util.HashMap;

import org.chocosolver.solver.Model;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.nary.alldifferent.conditions.Condition;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
// import org.chocosolver.solver.constraints.IIntConstraintFactory;
import org.chocosolver.solver.constraints.nary.alldifferent.conditions.CondAllDifferent;

class SelectionCondition implements Condition {
    Map<IntVar,BoolVar> mask;

    public SelectionCondition(IntVar[] vars, BoolVar[] selection) {
        this.mask = new HashMap<>();
        for (int i=0;i<selection.length;i++){
            mask.put(vars[i],selection[i]);
        }
    }
    @Override
    public boolean holdOnVar(IntVar x) {  
        return mask.get(x).isInstantiatedTo(1);
    }      
}

public class App {
    public static void main(String[] args) {
        int pbsize = 100;
        Model model  = new Model("AllDifferent on Selection");
        IntVar[] vs = model.intVarArray("vs",pbsize, 0, pbsize);
        BoolVar[] sel = model.boolVarArray("sel",pbsize);        

        SelectionCondition selection = new SelectionCondition(vs, sel);

        model.allDifferentUnderCondition(vs,selection,false,CondAllDifferent.DEFAULT).post();
       
        // to get an interesting solution
        // cardinality
        IntVar card = model.intVar("card",0,pbsize);
        // IntVar card = model.intVar("card",30,70);
        model.count(1,sel, card).post();
        card.ge(30).post();
        // card.le(70).post();
        // card.eq(50).post();

        // "const" attributes
        int tmp = 0;
        for(int i=0;i<pbsize;i++){
            tmp = i;
            // tmp = i%60;
            // tmp = (int)(i/1.8);
            // if(i%2==0) tmp++;

            // vs[i].le(tmp).post();
            // vs[i].eq(tmp).post(); //-- causes problems
            // vs[i].ge(tmp).post();
        }


        // ban/enforce selection range
        // int i1=40;
        // int i2=60;
        // for(int i=i1;i<i2;i++){
        //     sel[i].eq(0).post();
        // }


        // sum constraint on selected attributes
        IntVar[] sumselection = model.intVarArray(pbsize, 0,pbsize);
        for(int i=0;i<pbsize;i++){
            sumselection[i].eq(vs[i].mul(sel[i].asIntVar())).post();
        }

        IntVar sumresult = model.intVar(0, 434);
        model.sum(sumselection,"+",sumresult).post();;





        Solver solver = model.getSolver();
        if(solver.solve()){
            System.out.print(solver.getModelName());
            System.out.println(String.format(" card %d, sum %d", card.getValue(), sumresult.getValue()));
            for(int i=0;i<pbsize;i++){
                System.out.println(String.format("%d : sel? %d, value %d", i, sel[i].getValue(),vs[i].getValue()));
                // System.out.print();
                // System.out.println();
            }
            System.out.print(solver.getModelName());
            System.out.println(String.format(" card %d, sum %d", card.getValue(), sumresult.getValue()));
        }else {
            System.out.println("mmh");
        }
    }
}
